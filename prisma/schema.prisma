// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

//学生用テーブル。QRコードを送り返すときと招待客との関係性もここで確認する。
//kanaは読み仮名に限定する(祖父母が生徒の漢字がわからなかったときのため)
model Student {
  studentId String  @unique @default(uuid())
  kana      String
  email     String  @unique
  Guest     Guest[]
}

//招待客テーブル。情報を残すために色々項目が多い
model Guest {
  guestId   String     @unique @default(uuid())
  sex       String
  jobs      String
  name      String
  host      Student?   @relation(fields: [hostId], references: [studentId])
  hostId    String?
  History   History[]
  hostJhs   JHStudent? @relation(fields: [hostJhsId], references: [jhsId])
  hostJhsId String?
}

//スポンサー用テーブル。返送用emailとリカバリー用の名前
model Sponsor {
  sponsorId String    @unique @default(uuid())
  email     String    @unique
  name      String
  History   History[]
}

//中学生用テーブル。とりあえず年齢と送り返す用のメルアドだけ
model JHStudent {
  jhsId   String    @unique @default(uuid())
  age     Int
  name    String
  email   String    @unique
  parents Guest[]
  History History[]
}

//OBテーブル。難しい事考えたくないので招待客とテーブル分けた
//あとGuestテーブルが単独で存在するの嫌だし
model OB {
  obId  String @unique @default(uuid())
  age   Int
  name  String
  email String @unique
}

model History {
  id           Int        @id @default(autoincrement())
  timeStamp    DateTime   @default(now())
  Guest        Guest?     @relation(fields: [guestGuestId], references: [guestId])
  guestGuestId String?
  Sponsor      Sponsor?   @relation(fields: [sponsorId], references: [sponsorId])
  sponsorId    String?
  JHStudent    JHStudent? @relation(fields: [JHStudentId], references: [jhsId])
  JHStudentId  String?
}
